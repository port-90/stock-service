# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "deploy/external" ]
  pull_request:
    branches: [ "deploy/external" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
      - name: Ensure resources directory exists
        run: mkdir -p external/src/main/resources
      
      - name: Copy application.yml
        env:
          APPLICATION_YML_FILE: ${{ secrets.EXTERNAL_YML }}
        run: echo $APPLICATION_YML_FILE > external/src/main/resources/application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew :external:clean :external:bootJar

      # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드!!
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: external
          path: external/build/libs/external-0.0.1-SNAPSHOT.jar

  # 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest

    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: external

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EXTERNAL_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no external-0.0.1-SNAPSHOT.jar ${{ secrets.EXTERNAL_USERNAME }}@${{ secrets.EXTERNAL_HOST }}:${{ secrets.EXTERNAL_PATH }}/external-01.jar
          rm -f private_key.pem
     
      - name: Run Script
        uses: appleboy/ssh-action@master
        with: 
          host: ${{ secrets.EXTERNAL_HOST }}
          username: ${{ secrets.EXTERNAL_USERNAME}}
          key: ${{ secrets.EXTERNAL_SSH_KEY }}
          script: |
            cd ${{ secrets.EXTERNAL_PATH }}
            mv external.jar external-before.jar
            mv external-01.jar external.jar
            ./start.sh
